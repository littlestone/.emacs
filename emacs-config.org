#+TITLE: Emacs Configuration
#+AUTHOR: Ulf Ejlertsson
#+EMAIL: ulf.ejlertsson@gmail.com
#+OPTIONS: toc:3 num:nil

Emacs does not have namespaces, so I emulate Clojure namespaces by
using this prefix =ue=



* Set personal info explicit.
#+begin_src emacs-lisp
(setq user-full-name "Ulf Ejlertsson")
(setq user-mail-address "ulf.ejlertsson@gmail.com")
#+end_src

* Basic configuration

** The power of Common Lisp
#+begin_src emacs-lisp
(require 'cl)
#+end_src

** Misc utilites
Make Emacs reload changed files if you haven't also changed them in
Emacs (=global-auto-revert-mode=).
Winner Mode is great when you depend a lot on working with Emacs windows.
#+begin_src emacs-lisp
(global-auto-revert-mode t)
(winner-mode t)
#+end_src
Enable ANSI colors for the shell by default.
#+begin_src emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src

Reload =.emacs= file (useful for editing .emacs itself :)
#+begin_src emacs-lisp
(defun reload-dotemacs ()
  "Reload .emacs"
  (interactive)
  (load-file "~/.emacs.d/init.el"))
(global-set-key "\M-e" 'reload-dotemacs)
#+end_src


* Packages
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)
#+end_src

* Startup options
** Spash screen
Turn of splash screen and the message.
#+begin_src emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message nil)
#+end_src

** No beeping and 'y' for yes.
#+begin_src emacs-lisp
(setq visible-bell t)
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Scroll bar, tool bar and menu bar
Disable tool bar, the rest is fine on OSX
#+begin_src emacs-lisp
(when window-system
  (tool-bar-mode -1))
#+end_src

** Setting up the Emacs server
#+begin_src emacs-lisp
(server-start)
#+end_src

* Paths
Add the ~/bin to the Emacs shell path and fix the PATH variable on OS X
#+begin_src emacs-lisp
(add-to-list 'exec-path "/Users/ulf/bin")

(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell (shell-command-to-string "$SHELL -i -c 'echo $PATH'")))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

(if window-system (set-exec-path-from-shell-PATH))
#+end_src

* Display settings
Set the default font, and set transparency.
#+begin_src emacs-lisp
(set-default-font "Menlo-10")
(setq mac-allow-anti-aliasing t)
(set-frame-parameter (selected-frame) 'alpha '(96 84))
(add-to-list 'default-frame-alist '(alpha 96 84))
(load-theme 'zenburn t)
#+end_src

Toggle transparency.
#+begin_src emacs-lisp
(defun toggle-transparency ()
  (interactive)
  (let ((param (cadr (frame-parameter nil 'alpha))))
    (if (and param (/= param 100))
        (set-frame-parameter nil 'alpha '(100 100))
      (set-frame-parameter nil 'alpha '(85 50)))))
(global-set-key (kbd "C-c t") 'toggle-transparency)

#+end_src

Make Emacs to fully redraw the display before it processes queued input events.
#+begin_src emacs-lisp
(setq redisplay-dont-pause t)
#+end_src

** Frame font, title and size
#+begin_src emacs-lisp
(if window-system (set-frame-font "Menlo-10"))
(if window-system (setq frame-title-format
  '("" invocation-name ": "(:eval (if (buffer-file-name)
                (abbreviate-file-name (buffer-file-name))
                  "%b")))))
(if (window-system)
  (set-frame-width (selected-frame) 190))

(defun lh-get-height-max ()
  (- (/ (cadddr (display-usable-bounds))
	(frame-char-height))
     2))

(defun lh-max-frames ()
  (interactive)
  (modify-all-frames-parameters (list (cons 'height (lh-get-height-max)))))
(lh-max-frames)
#+end_src

Make buffer names unique.
#+begin_src emacs-lisp
(require 'uniquify)
(setq
  uniquify-buffer-name-style 'post-forward
  uniquify-separator ":")
#+end_src

** Lines, columns, and parenthesis
Display the column number and line number i mode-line and also
highlight matching parenthesis.
#+begin_src emacs-lisp
(column-number-mode 1)
(line-number-mode t)
(setq show-paren-delay 0
      show-paren-style 'parenthesis)
(show-paren-mode 1)
#+end_src

** Time and date
Set the time format to 24hr format and display time, date and load
in the mode-line
#+begin_src emacs-lisp
(setq display-time-day-and-date t)
(setq display-time-24hr-format t)
(display-time-mode 1)
#+end_src

** Mouse and scrolling
Turn off native OSX scrolling while in terminal mode. Move the mouse
pointer out of the way when the cursor is near it.
#+begin_src emacs-lisp
;(when window-system
;  (mouse-wheel mode t))
(set-variable 'scroll-conservatively 5)
(mouse-avoidance-mode 'cat-and-mouse)
#+end_src

** Eshell
Enable Plan 9's terminal, the Eshell smart display
#+begin_src emacs-lisp
(require 'eshell)
(require 'em-smart)
(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)
#+end_src

Fix terminal in emacs (M-x term) under MacOS. Use Emacs terminfo, not system terminfo.
#+begin_src emacs-lisp
(setq system-uses-terminfo nil)
#+end_src


** Basic text editing
Always do syntax highlighting and require newline and stop at the last line.
#+begin_src emacs-lisp
(setq default-major-mode 'text-mode)
(global-font-lock-mode 1)
(setq require-final-newline t)
(setq next-line-add-newlines nil)
(setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))
;(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'after-save-hook 'delete-trailing-whitespace)
(setq fill-column 80)
(global-hl-line-mode +1)
(electric-indent-mode +1)
#+end_src

Also indent automagical by switching RET and LF.
#+begin_src emacs-lisp
(setq foo (global-key-binding "\C-m"))
(global-set-key "\C-m" (global-key-binding "\C-j"))
(global-set-key "\C-j" foo)
#+end_src

Hightlight marked region.
#+begin_src emacs-lisp
(transient-mark-mode t)
#+end_src

Fci-mode.
#+begin_src emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-width 2)
(setq fci-rule-color "#5b605e")

(define-globalized-minor-mode
  global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode 1)
#+end_src

* Key mapping
F1 go to man page.
#+begin_src emacs-lisp
(global-set-key [(f1)] (lambda () (interactive) (manual-entry
(current-word) ) ) )
#+end_src

F2 find file.
#+begin_src emacs-lisp
(global-set-key [f2] 'find-file)
#+end_src

F3 Help.
#+begin_src emacs-lisp
(global-set-key [f3] 'help-command)
#+end_src

** Remap meta key on OS X
#+begin_src emacs-lisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      x-select-enable-clipboard t)
#+end_src

* Auto complete
#+begin_src emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
#+end_src
* Org mode
#+begin_src emacs-lisp
(require 'ob-tangle)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-export-with-LaTeX-fragments t)
(setq org-log-done t)
#+end_src

Enable /babel/ for some languages.
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
  '( (haskell . t)
     ;;(clojure. t)
     (sh . t)
     (python . t)
     (emacs-lisp . t)
     (C . t)
     (ocaml . t)
   ))

(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
#+end_src

** Enable =LaTeX= in Org mode
#+begin_src emacs-lisp
(require 'org-latex)
(unless (boundp 'org-export-latex-classes)
  (setq org-export-latex-classes nil))
(add-to-list 'org-export-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")))

(setq org-export-latex-listings t)
(add-to-list 'org-export-latex-packages-alist '("" "listings"))
(add-to-list 'org-export-latex-packages-alist '("" "color"))
#+end_src

** Mobile org/Dropbox
Set the location of the =org= files on the local system, and the Dropbox
root directory.
#+begin_src emacs-lisp
(setq org-directory "~/org")
(setq org-mobile-directory "~/Dropbox/MobileOrg")
#+end_src
Set the name of the file where new notes will be stored.
#+begin_src emacs-lisp
(setq org-mobile-inbox-for-pull "~/org/inbox.org")
#+end_src

* Deft

#+begin_src emacs-lisp
     (setq deft-directory "~/Dropbox/org/deft")
     (setq deft-use-filename-as-title t)
     (setq deft-extension "org")
     (setq deft-text-mode 'org-mode)
   #+end_src
* LaTeX
Invoke the AUCTeX package.
#+begin_src emacs-lisp
(require 'tex-site)
#+end_src

* Magit
Bind C-x g to magit-status and show magit status in full screen.
#+begin_src emacs-lisp
(eval-after-load 'magit '(require 'magit))

(global-set-key (kbd "C-x g") 'magit-status)

(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))

;(define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
#+end_src

* Git gutter
#+begin_src emacs-lisp
(global-git-gutter-mode t)
(setq git-gutter:modified-sign "  ") ;; two space
(setq git-gutter:added-sign "++")    ;; multiple character is OK
(setq git-gutter:deleted-sign "--")

(set-face-background 'git-gutter:modified "purple") ;; background color
(set-face-foreground 'git-gutter:added "green")
(set-face-foreground 'git-gutter:deleted "red")
(setq git-gutter:window-width 2)
#+end_src

* IDO
Ido stands for Interactively Do Things.
=ido-ubiquitous= takes the power of ido and lets you use it almost everywhere.
=ido-enable-flex-matching= gives me fuzzy-finding and
=ido-use-virtual-buffers= lets me switch to (and re-open) closed buffers
from my buffer search.
#+begin_src emacs-lisp
  (ido-mode t)
  (ido-ubiquitous t)
  (setq ido-enable-flex-matching t
        ido-use-virtual-buffers t)
#+end_src

* Helm
#+begin_src emacs-lisp
(require 'helm-config)
#+end_src
* Autopair-mode
#+begin_src emacs-lisp
(require 'autopair)
#+end_src
* Supercharge recentf by adding Ido mode support
#+begin_src emacs-lisp
(require 'recentf)

;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)

;; enable recent files mode.
(recentf-mode t)

; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))
#+end_src

* Undo tree
#+begin_src emacs-lisp
(require 'undo-tree)
#+end_src

* Smex
Smex is a replacement for the default behavior of =M-x= with better
history and completion.
#+begin_src emacs-lisp
  (require 'smex)
  (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

* Ack
=ack= is an enhanced grep.
#+begin_src emacs-lisp
  (setq ack-prompt-for-directory t)
  (setq ack-executable (executable-find "ack-grep"))
#+end_src

* Sunrise Commander
#+begin_src emacs-lisp
(require 'sunrise-commander)
#+end_src


* Projectile
#+begin_src emacs-lisp
(projectile-global-mode)
#+end_src
* Yasnippets
Enable yasnippet
#+begin_src emacs-lisp
(require 'yasnippet)
(yas/global-mode 1)
(yas/load-directory "~/.emacs.d/elpa/yasnippet-20130218.2229/snippets")
#+end_src

* Programming

** Add mode hooks
#+begin_src emacs-lisp
(add-hook 'c-mode-hook        'flyspell-prog-mode 1)
(add-hook 'c++-mode-hook      'flyspell-prog-mode 1)
(add-hook 'makefile-mode-hook 'flyspell-prog-mode 1)
(add-hook 'python-mode-hook   'flyspell-prog-mode 1)
(add-hook 'sh-mode-hook       'flyspell-prog-mode 1)
(add-hook 'c-mode-common-hook 'turn-on-auto-fill)
(add-hook 'c++-mode-common-hook ' turn-on-auto-fill)
(add-hook 'prog-mode-hook 'flyspell-prog-mode 1)
#+end_src

** C/C++
#+begin_src emacs-lisp
(require 'cc-mode)
#+end_src

*** C
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook 'turn-on-auto-fill)

(add-hook 'c-mode-hook (function (lambda()
                  (c-set-style "bsd")
                  (setq c-basic-offset 8)
                  (setq indent-tabs-mode nil)
                  ) ) )
#+end_src

*** C++
#+begin_src emacs-lisp
(defun ue-c-namespace-open-indent (langelem)
  "Used with c-set-offset, indents namespace opening braces to the same indentation as the line on which the namespace declaration starts."
  (save-excursion
    (goto-char (cdr langelem))
    (let ((column (current-column)))
      (beginning-of-line)
      (skip-chars-forward " \t")
      (- (current-column) column)))
  )

(defun ue-c-namespace-indent (langelem)
  "Used with c-set-offset, indents namespace scope elements 2 spaces
from the namespace declaration iff the open brace sits on a line by itself."
  (save-excursion
    (if (progn (goto-char (cdr langelem))
               (setq column (current-column))
               (end-of-line)
               (while (and (search-backward "{" nil t)
                           (assoc 'incomment (c-guess-basic-syntax))))
               (skip-chars-backward " \t")
               (bolp))
        2)))

(add-hook 'c++-mode-common-hook ' turn-on-auto-fill)

(add-hook 'c++-mode-hook (function (lambda()
                    (c-set-style "bsd")
		        (c-set-offset 'innamespace 'ue-c-namespace-indent)
			    (c-set-offset 'namespace-open 'ue-c-namespace-open-indent)
			        (c-set-offset 'access-label -3)
                    (setq c-basic-offset 4)
                    (setq indent-tabs-mode nil)
                    ) ))
#+end_src

**** Clang
Autocomplete with =clang=.
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d" "~/Dev/svn/llvm/tools/clang/utils")
;;(setq load-path (cons "~/.emacs.d" "~/Dev/svn/llvm/trunk/tools/clang/utils"))
;;(setq ac-sources '(ac-source-clang-complete))
;;(setq ac-auto-start nil)
;;(define-key c-mode-base-map (kbd "M-/") 'auto-complete)
#+end_src

Syntax highlighting mode for LLVM assembly files.
#+begin_src emacs-lisp
  (setq load-path
    (cons (expand-file-name "~/Dev/svn/llvm/utils/emacs") load-path))
  (require 'llvm-mode)
#+end_src

Syntax highlighting mode for TableGen description files (tablegen-mode.el).
#+begin_src emacs-lisp
  (setq load-path
    (cons (expand-file-name "~/Dev/svn/llvm/utils/emacs/tablegen-mode.el") load-path))
  (require 'tablegen-mode)
#+end_src

*** Objective C
#+begin_src emacs-lips
(autoload 'objc-mode "cc-mode" "Objective-C Editing Mode" t)
#+end_src


** Lisp
Every Lisp needs a pretty lambda character.
#+begin_src emacs-lis
(defun ue-pretty-lambdas ()
  "Display the word "lambda" by "λ"."
  (font-lock-add-keywords
   nil
   `(("\\(lambda\\>\\)"
      (0
       (progn
	 (compose-region (match-beginning 1) (match-end 1) "λ")
	 'font-lock-keyword-face))))))

(add-hook 'emacs-lisp-mode-hook 'ue-pretty-lambdas)
(add-hook 'lisp-mode-hook 'ue-pretty-lambdas)
#+end_src

Enable rainbow delimiters.
#+begin_src emacs-lisp
(require 'rainbow-delimiters)
(global-rainbow-delimiters-mode)
#+end_src

Enable 'hightlight-parentheses-mode'.
#+begin_src emacs-lisp
(require 'highlight-parentheses)
#+end_src

Enable =paredit=.
#+begin_src emacs-lisp
(require 'paredit)
#+end_src

Shen-mode.
#+begin_src emacs-lisp
(require 'shen-mode)
(require 'inf-shen) ; <- for interaction with an external shen process
#+end_src

*** Common Lisp
Enable =slime= for Lisp.
#+begin_src emacs-lisp
(setq inferior-lisp-program "/Applications/Clozure\ CL.app")
     (require 'slime-autoloads)
#+end_src

*** Racket/Scheme
Enable =geiser= and =quack= for scheme/racket.
#+begin_src emacs-lisp
(setq geiser-active-implementations '(racket))

;; quack mode settings for scheme
(autoload 'quack "quack" nil t)

;; This hook lets you use your theme colours instead of quack's ones.
(defun scheme-mode-quack-hook ()
  (setq quack-global-menu-p nil)
  ;;(require 'quack)
  (quack-pretty-lambda-p t)
  (setq quack-fontify-style 'emacs))

(add-hook 'scheme-mode-hook 'scheme-mode-quack-hook)

#+end_src

*** Clojure
Enable =clojure-mode= and =nrepl=.
#+begin_src emacs-lisp
(require 'clojure-mode)
(require 'nrepl)

(require 'ac-nrepl)
(add-hook 'nrepl-mode-hook 'ac-nrepl-setup)
(add-hook 'nrepl-interaction-mode-hook 'ac-nrepl-setup)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'nrepl-mode))

(defun set-auto-complete-as-completion-at-point-function ()
  (setq completion-at-point-functions '(auto-complete)))
(add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)

(add-hook 'nrepl-mode-hook 'set-auto-complete-as-completion-at-point-function)
(add-hook 'nrepl-interaction-mode-hook 'set-auto-complete-as-completion-at-point-function)

(define-key nrepl-interaction-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc)

(add-hook 'clojure-mode-hook
          (lambda ()
            (setq inferior-lisp-program "lein repl")))

(add-hook 'clojure-mode-hook
	  (lambda ()
	    (paraedit-mode +1)))
#+end_src
Enable =auto-fill= mode.
#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook 'auto-fill-mode)
#+end_src

Due to syntax differences with other Lisp-like languages, Clojure is
better suited to a =fill-column= value of 80.
#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook (lambda () (set-fill-column 80)(fci-mode)))
#+end_src

Clojure needs some help with indenting.
#+begin_src emacs-lisp
(put 'match 'clojure-indent-function 1)
(put 'if 'clojure-indent-function 0) ;; Really??
#+end_src

Enable =eldoc= in clojure buffers.
#+begin_src emacs-lisp
(add-hook 'nrepl-interaction-mode-hook
  'nrepl-turn-on-eldoc-mode)
#+end_src

Stop the error buffer from popping up while working in the =REPL= buffer.
#+begin_src emacs-lisp
(setq nrepl-popup-stacktraces nil)
#+end_src

Make =C-c C-z= switch to the =*nrepl*= buffer in the current window.
#+begin_src emacs-lisp
(add-to-list 'same-window-buffer-names "*nrepl*")
#+end_src

Turn on the =paredit= for clojure.
#+begin_src emacs-lisp
(defun turn-on-paredit () (paredit-mode 1))
(add-hook 'clojure-mode-hook 'turn-on-paredit)
(add-hook 'nrepl-mode-hook 'paredit-mode)
#+end_src

Add some bling.
#+begin_src emacs-lisp
(eval-after-load 'clojure-mode
  '(font-lock-add-keywords
    'clojure-mode `(("(\\(fn\\)[\[[:space:]]"
                     (0 (progn (compose-region (match-beginning 1)
                                               (match-end 1) "λ")
                               nil))))))

(eval-after-load 'clojure-mode
  '(font-lock-add-keywords
    'clojure-mode `(("\\(#\\)("
                     (0 (progn (compose-region (match-beginning 1)
                                               (match-end 1) "ƒ")
                               nil))))))

(eval-after-load 'clojure-mode
  '(font-lock-add-keywords
    'clojure-mode `(("\\(#\\){"
                     (0 (progn (compose-region (match-beginning 1)
                                               (match-end 1) "∈")
                               nil))))))
#+end_src

** Erlang
Setup Erlang mode.
#+begin_src emacs-lisp
(add-to-list
   'load-path
       (car (file-expand-wildcards "/usr/local/lib/erlang/lib/tools-*/emacs")))
(setq erlang-root-dir "/usr/local/lib/erlang")
(setq exec-path (cons "/usr/local/lib/erlang/bin" exec-path))
(require 'erlang-start)
(require 'erlang-flymake)
(defvar inferior-erlang-prompt-timeout t)

(add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.hrl?$" . erlang-mode))

(add-to-list 'load-path "/usr/local/share/distel/elisp")
(require 'distel)
(distel-setup)

;; FlyMake for Erlang.
(require 'flymake)
(setq flymake-gui-warnings-enabled nil)
(setq flymake-log-level 3)
(erlang-flymake-only-on-save)

;(require 'flymake)
(defun flymake-erlang-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
		     'flymake-create-temp-inplace))
	 (local-file (file-relative-name temp-file
		(file-name-directory buffer-file-name))))
    (list "~/bin/eflymake" (list local-file))))

(add-to-list 'flymake-allowed-file-name-masks '("\\.erl\\'" flymake-erlang-init))

(defun ue-erlang-mode-hook ()
        ;; when starting an Erlang shell in Emacs, default in the node name
        (setq inferior-erlang-machine-options '("-sname" "emacs"))
        ;; add Erlang functions to an imenu menu
        (imenu-add-to-menubar "imenu")
        ;; customize keys
        (local-set-key [return] 'newline-and-indent)
	(flymake-mode 1)
        )
;; Some Erlang customizations
(add-hook 'erlang-mode-hook 'ue-erlang-mode-hook)



(defun ue-erlang-mode-hook ()
(flymake-mode 1))

(add-hook 'erlang-mode-hook 'ue-erlang-mode-hook)
#+end_src


** Haskell
#+begin_src emacs-lisp
(require 'haskell-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
(add-hook 'haskell-mode-hook 'font-lock-mode)

(add-hook 'haskell-mode-hook 'turn-on-haskell-font-lock)
(setq haskell-font-lock-symbols t)

 (autoload 'ghc-init "ghc" nil t)
 (add-hook 'haskell-mode-hook
           (lambda ()
               (ghc-init)
               (flymake-mode)
               (require 'auto-complete-config)
               (auto-complete-mode t)
               (add-to-list 'ac-sources 'ac-source-ghc-mod)))
;; haskell-mode hooks
(add-hook 'haskell-mode-hook 'capitalized-words-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-decl-scan)
(defun pretty-lambdas-haskell ()
  (font-lock-add-keywords
   nil `((,(concat "\\(" (regexp-quote "\\") "\\)")
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))

(add-hook 'haskell-mode-hook (lambda () (ghc-init) (flymake-mode)))


(add-hook 'haskell-mode-hook 'pretty-lambdas-haskell)

(eval-after-load 'haskell-font-lock
 '(setq haskell-font-lock-symbols-alist
        (delq nil
              (mapcar (lambda (rewrite)
                        (if (member (car rewrite) '("->" "<-"))
                            nil rewrite))
                      haskell-font-lock-symbols-alist))))
#+end_src

*** Agda
#+begin_src emacs-lisp
(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))
#+end_src

** Ocaml
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.ml[iylp]?" . tuareg-mode))
(autoload 'tuareg-mode "tuareg" "Major mode for editing OCaml code" t)
(autoload 'tuareg-run-ocaml "tuareg" "Run an inferior OCaml process." t)
(autoload 'ocamldebug "ocamldebug" "Run the OCaml debugger" t)
(setq tuareg-font-lock-symbols t)

;; Indent `=' like a standard keyword.
(setq tuareg-lazy-= t)
;; Indent [({ like standard keywords.
(setq tuareg-lazy-paren t)
;; No indentation after `in' keywords.
(setq tuareg-in-indent 0)

(add-hook 'tuareg-mode-hook
	  ;; Turn on auto-fill minor mode.
	  (lambda () (auto-fill-mode 1)))
#+end_src

** Python
#+begin_src emacs-lisp
(require 'python-mode)
(require 'python-pep8)
(require 'python-pylint)
#+end_src
